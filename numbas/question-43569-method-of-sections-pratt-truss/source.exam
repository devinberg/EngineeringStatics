// Numbas version: exam_question_groups
{"name": "Method of sections: Pratt Truss", "extensions": ["/srv/numbas/media/user-extensions/extracted/41/geogebra", "/srv/numbas/media/user-extensions/extracted/55/quantities", "/srv/numbas/media/user-extensions/extracted/98/weh"], "custom_part_types": [{"source": {"pk": 19, "author": {"pk": 2530, "name": "William Haynes"}, "edit_page": "/part_type/19/edit"}, "can_be_step": true, "can_be_gap": true, "published": false, "public_availability": "restricted", "extensions": ["quantities"], "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "marking_notes": [{"definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "name": "mark"}, {"definition": "qty(student_scalar, student_units)\n\n", "description": "A value representing the student's answer to this part.", "name": "interpreted_answer"}, {"definition": "settings[\"correctAnswer\"]\n\n", "description": "", "name": "correct_quantity"}, {"definition": "units(correct_quantity)\n", "description": "", "name": "correct_units"}, {"definition": "[\"plain\",\"en\"]", "description": "", "name": "allowed_notation_styles"}, {"definition": "matchnumber(studentAnswer,allowed_notation_styles)", "description": "", "name": "match_student_number"}, {"definition": "match_student_number[1]", "description": "", "name": "student_scalar"}, {"definition": "join(\nsplit(\njoin(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,'-'),' ')\n,'\u00b0'),' deg')\n", "description": "<p>Does clumsy substitution to</p>\n<p>1.&nbsp;replace '-'&nbsp;with ' '&nbsp;</p>\n<p>2. replace '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "name": "student_units"}, {"definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n", "description": "", "name": "good_units"}, {"definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "name": "student_quantity"}, {"definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   ", "description": "", "name": "percent_error"}, {"definition": "percent_error <= settings['right']\n", "description": "", "name": "right"}, {"definition": "right_sign and percent_error <= settings['close']", "description": "<p>Only marked close if the student actually has the right sign.</p>", "name": "close"}, {"definition": "sign(student_scalar) = sign(correct_quantity) ", "description": "", "name": "right_sign"}], "name": "Engineering Accuracy with units", "help_url": "", "short_name": "engineering-answer", "input_widget": "string", "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\njoin(\nsplit(\njoin(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,'-'),' ')\n,'\u00b0'),' deg')\n\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "settings": [{"evaluate": true, "help_url": "", "hint": "The correct answer given as a JME quantity.", "label": "Correct Quantity.", "default_value": "", "input_type": "code", "name": "correctAnswer"}, {"evaluate": true, "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "label": "% Accuracy for right.", "default_value": "0.2", "input_type": "code", "name": "right"}, {"evaluate": true, "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "label": "% Accuracy for close.", "default_value": "1.0", "input_type": "code", "name": "close"}, {"help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "label": "Close with units.", "default_value": "75", "input_type": "percent", "name": "C1"}, {"help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "label": "No units or wrong sign", "default_value": "50", "input_type": "percent", "name": "C2"}, {"help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "label": "Close, no units.", "default_value": "25", "input_type": "percent", "name": "C3"}], "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"value": "", "static": true}, "allowEmpty": {"value": true, "static": true}}}], "resources": [], "navigation": {"allowregen": true, "preventleave": false, "showfrontpage": false}, "question_groups": [{"pickingStrategy": "all-ordered", "questions": [{"metadata": {"description": "<p>Solve for the internal force in three members of a truss.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "variables": {"A": {"description": "", "definition": "sqrt(A_x^2+A_y^2)", "group": "magnitudes", "templateType": "anything", "name": "A"}, "height": {"description": "", "definition": " width + random(-1.5..1.5#0.5)\n", "group": "Inputs", "templateType": "anything", "name": "height"}, "JK": {"description": "", "definition": "G width / height", "group": "magnitudes", "templateType": "anything", "name": "JK"}, "debug": {"description": "", "definition": "false", "group": "Inputs", "templateType": "anything", "name": "debug"}, "G": {"description": "<p>sum of moments about A / dperp&nbsp;</p>", "definition": "sum(map(F[k]*D[k],k,loads))/4", "group": "magnitudes", "templateType": "anything", "name": "G"}, "ans": {"description": "", "definition": "[[CD,DE][version],[HJ,EJ][version],[CJ,JK][version]]\n\n", "group": "magnitudes", "templateType": "anything", "name": "ans"}, "EJ_y": {"description": "<p>sigma f_y=0</p>", "definition": "G - F[\"E\"] - f[\"K\"]", "group": "magnitudes", "templateType": "anything", "name": "EJ_y"}, "EJ": {"description": "", "definition": "EJ_y/sin(radians(theta))", "group": "magnitudes", "templateType": "anything", "name": "EJ"}, "loads": {"description": "<p>only apply loads at middle 8&nbsp;(out of 10) points.</p>", "definition": "sort(shuffle(names[1..9])[0..3])", "group": "Inputs", "templateType": "anything", "name": "loads"}, "DE": {"description": "", "definition": "((F[\"E\"] + F[\"K\"] - 2 G) width/height + F[\"F\"])", "group": "magnitudes", "templateType": "anything", "name": "DE"}, "units": {"description": "", "definition": "random(['N','m'],['lb','ft'])", "group": "Inputs", "templateType": "anything", "name": "units"}, "CD": {"description": "<p>sigma M_j = 0&nbsp;</p>", "definition": "((F[\"C\"]+F[\"H\"]-2 A_y) width + F[\"B\"]* height)/height", "group": "magnitudes", "templateType": "anything", "name": "CD"}, "A_x": {"description": "", "definition": "f[\"B\"]-f[\"F\"]", "group": "magnitudes", "templateType": "anything", "name": "A_x"}, "CJ_y": {"description": "<p>sum of moments about A/dperp</p>", "definition": "A_y - F[\"C\"]-F[\"H\"]", "group": "magnitudes", "templateType": "anything", "name": "CJ_y"}, "names": {"description": "", "definition": "[\"A\",\"B\",\"H\",\"C\",\"J\",\"D\",\"K\",\"E\",\"F\",\"G\"]", "group": "Inputs", "templateType": "anything", "name": "names"}, "HJ": {"description": "", "definition": "(A_y width - A_x height)/height", "group": "magnitudes", "templateType": "anything", "name": "HJ"}, "version": {"description": "", "definition": "random(0,1)", "group": "Inputs", "templateType": "anything", "name": "version"}, "ggb_forces": {"description": "", "definition": "map([lower(n),F[n]],n,loads)", "group": "Inputs", "templateType": "anything", "name": "ggb_forces"}, "CJ": {"description": "", "definition": "CJ_y/sin(radians(theta))", "group": "magnitudes", "templateType": "anything", "name": "CJ"}, "width": {"description": "", "definition": "random(3,4,5,6)", "group": "Inputs", "templateType": "anything", "name": "width"}, "D": {"description": "<p>Normalized perpendicular&nbsp;distances from point A</p>\n<p>multiply this by width to get&nbsp;actual distance</p>\n<p>positive moments except for force B which acts left</p>", "definition": "dict(map([names[n],[0,-height/width,1,1,2,2,3,3,4,4,height/width,5][n]],n,0..9))", "group": "Inputs", "templateType": "anything", "name": "D"}, "theta": {"description": "<p>Angle of diagonal members</p>", "definition": "degrees(arctan(height/width))", "group": "Inputs", "templateType": "anything", "name": "theta"}, "A_y": {"description": "", "definition": "sum(map(F[k],k,[\"C\",\"D\",\"E\",\"H\",\"J\",\"K\"]))-G", "group": "magnitudes", "templateType": "anything", "name": "A_y"}, "F": {"description": "<p>force magnitudes&nbsp;</p>", "definition": "dict(map([n,if(n in loads,random(100..500#25),0)],n,names))", "group": "Inputs", "templateType": "anything", "name": "F"}, "ans_name": {"description": "", "definition": "[[\"CD\",\"DE\"][version],[\"HJ\",\"EJ\"][version],[\"CJ\",\"JK\"][version]]", "group": "magnitudes", "templateType": "anything", "name": "ans_name"}}, "advice": "<ol>\n<li>Draw a free body diagram of the whole truss and take moments at <em>A</em> to find force <em>G</em>, and&nbsp;take moments at <em>G</em> to find <em>A</em>. &nbsp;Check your answer by ensuring that $\\Sigma F_y = 0$.</li>\n<li>Take an imaginary cut through the three members of interest to divide the truss into two sections.</li>\n<li>Draw a free body diagram of one side of the truss. &nbsp;Indicate forces at the cut members as tension (pulling away from the joint). &nbsp;Show only the loads which act on the isolated portion of the truss</li>\n<li>Apply three equations of equilibrium to find the forces in the cut members. &nbsp;Negative values will indicate compression. &nbsp;It is good idea to take moments at a point where two unknowns intersect when possible.</li>\n</ol>", "ungrouped_variables": [], "name": "Method of sections: Pratt Truss", "rulesets": {}, "preamble": {"css": "", "js": ""}, "tags": ["mechanics", "Mechanics", "method of sections", "Statics", "statics", "truss"], "variable_groups": [{"variables": ["height", "width", "units", "ggb_forces", "names", "loads", "F", "D", "version", "debug", "theta"], "name": "Inputs"}, {"variables": ["G", "A_y", "A_x", "A", "CD", "HJ", "CJ_y", "CJ", "DE", "JK", "EJ_y", "EJ", "ans", "ans_name"], "name": "magnitudes"}, {"variables": [], "name": "quantities"}], "statement": "<p>{geogebra_applet('yrdq38xt',[['width',width],['height',height],['units','\"'+units[1]+'\"']]+ggb_forces)}</p>\n<p>Determine the forces in members <span data-jme-visible=\"version=0\">$CD$, $HJ$ and $CJ$</span> <span data-jme-visible=\"version=1\">$DE$, $EJ$, and $JK$</span> knowing that the loads supported by the Pratt&nbsp;truss are:</p>\n<p>{load_html(0,units[0])},&nbsp;{load_html(1,units[0])}, and&nbsp;{load_html(2, units[0])}.</p>\n<p>Indicate tension or compression.</p>", "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "variablesTest": {"condition": "", "maxRuns": 100}, "parts": [{"type": "gapfill", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "prompt": "<p>Determine the reactions at <em>A</em> and <em>G</em>.</p>\n<p><em>$A_x$</em> =&nbsp;[[0]]&nbsp;&nbsp;[[1]]&nbsp;&nbsp;<span data-jme-visible=\"debug\">{siground(qty(A_x,units[0]),4)} &nbsp; &nbsp;{map(if(sign(A_x)=s,2,0),s,[1,-1,0])}</span></p>\n<p><em>$A_y$</em> =&nbsp;[[2]]&nbsp;&nbsp;[[3]]&nbsp; <span data-jme-visible=\"debug\">{siground(qty(A_y,units[0]),4)} &nbsp; &nbsp;{map(if(sign(A_y)=s,2,0),s,[1,-1,0])}</span></p>\n<p><em>$G$</em>&nbsp; &nbsp;=&nbsp;[[4]]&nbsp;&nbsp;[[5]]&nbsp;&nbsp;<span data-jme-visible=\"debug\">{siground(qty(G,units[0]),4)} &nbsp; &nbsp;{map(if(sign(G)=s,2,0),s,[1,-1,0])}</span></p>\n<p></p>", "showFeedbackIcon": true, "customMarkingAlgorithm": "", "marks": 0, "gaps": [{"type": "engineering-answer", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "marks": "4", "showFeedbackIcon": true, "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "scripts": {}, "customMarkingAlgorithm": "", "settings": {"C1": "75", "right": "0.2", "C3": "25", "correctAnswer": "qty(abs(A_x),units[0])", "close": "1.0", "C2": "50"}}, {"type": "1_n_2", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "shuffleChoices": false, "marks": 0, "showFeedbackIcon": true, "customMarkingAlgorithm": "", "maxMarks": 0, "matrix": "map(if(sign(A_x)=s,2,0),s,[1,-1,0])", "choices": ["Right", "Left", "Neither"], "displayType": "dropdownlist", "minMarks": 0, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true, "displayColumns": 0}, {"type": "engineering-answer", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "marks": "4", "showFeedbackIcon": true, "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "scripts": {}, "customMarkingAlgorithm": "", "settings": {"C1": "75", "right": "0.2", "C3": "25", "correctAnswer": "qty(abs(A_y),units[0])", "close": "1.0", "C2": "50"}}, {"type": "1_n_2", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "shuffleChoices": false, "marks": 0, "showFeedbackIcon": true, "customMarkingAlgorithm": "", "maxMarks": 0, "matrix": "map(if(sign(A_y)=s,2,0),s,[1,-1,0])", "choices": ["Up", "Down", "Neither"], "displayType": "dropdownlist", "minMarks": 0, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true, "displayColumns": 0}, {"type": "engineering-answer", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "marks": "4", "showFeedbackIcon": true, "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "scripts": {}, "customMarkingAlgorithm": "", "settings": {"C1": "75", "right": "0.2", "C3": "25", "correctAnswer": "qty(abs(G),units[0])", "close": "1.0", "C2": "50"}}, {"type": "1_n_2", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "shuffleChoices": false, "marks": 0, "showFeedbackIcon": true, "customMarkingAlgorithm": "", "maxMarks": 0, "matrix": "map(if(sign(G)=s,2,0),s,[1,-1,0])", "choices": ["Up", "Down", "Neither"], "displayType": "dropdownlist", "minMarks": 0, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true, "displayColumns": 0}], "sortAnswers": false, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true}, {"type": "gapfill", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "prompt": "<p>Determine the force in member&nbsp;<em>{ans_name[0]}.</em></p>\n<p><em>{ans_name[0]}</em> =&nbsp;[[0]] [[1]] &nbsp;<span data-jme-visible=\"debug\">{siground(qty(ans[0],units[0]),4)}</span></p>", "showFeedbackIcon": true, "customMarkingAlgorithm": "", "marks": 0, "gaps": [{"type": "engineering-answer", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "marks": "4", "showFeedbackIcon": true, "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "scripts": {}, "customMarkingAlgorithm": "", "settings": {"C1": "75", "right": "0.2", "C3": "25", "correctAnswer": "qty(abs(ans[0]),units[0])", "close": "1.0", "C2": "50"}}, {"type": "1_n_2", "showCorrectAnswer": false, "unitTests": [], "variableReplacementStrategy": "originalfirst", "shuffleChoices": false, "marks": 0, "showFeedbackIcon": true, "customMarkingAlgorithm": "", "maxMarks": 0, "matrix": "map(if(sign(ans[0])=s,2,0),s,[1,-1,0])", "choices": ["Tension", "Compression", "Neither"], "displayType": "dropdownlist", "minMarks": 0, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true, "displayColumns": 0}], "sortAnswers": false, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true}, {"type": "gapfill", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "prompt": "<p>Determine the force in member&nbsp;<em>{ans_name[1]}.</em></p>\n<p><em>{ans_name[1]}</em> =&nbsp;[[0]] [[1]] &nbsp;<span data-jme-visible=\"debug\">{siground(qty(ans[1],units[0]),4)}</span></p>", "showFeedbackIcon": true, "customMarkingAlgorithm": "", "marks": 0, "gaps": [{"type": "engineering-answer", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "marks": "4", "showFeedbackIcon": true, "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "scripts": {}, "customMarkingAlgorithm": "", "settings": {"C1": "75", "right": "0.2", "C3": "25", "correctAnswer": "qty(abs(ans[1]),units[0])", "close": "1.0", "C2": "50"}}, {"type": "1_n_2", "showCorrectAnswer": false, "unitTests": [], "variableReplacementStrategy": "originalfirst", "shuffleChoices": false, "marks": 0, "showFeedbackIcon": true, "customMarkingAlgorithm": "", "maxMarks": 0, "matrix": "map(if(sign(ans[1])=s,2,0),s,[1,-1,0])", "choices": ["Tension", "Compression", "Neither"], "displayType": "dropdownlist", "minMarks": 0, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true, "displayColumns": 0}], "sortAnswers": false, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true}, {"type": "gapfill", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "prompt": "<p>Determine the force in member&nbsp;<em>{ans_name[2]}.</em></p>\n<p><em>{ans_name[2]}</em> =&nbsp;[[0]] [[1]] <span data-jme-visible=\"debug\">&nbsp;{siground(qty(ans[2],units[0]),4)}</span></p>", "showFeedbackIcon": true, "customMarkingAlgorithm": "", "marks": 0, "gaps": [{"type": "engineering-answer", "showCorrectAnswer": true, "unitTests": [], "variableReplacementStrategy": "originalfirst", "marks": "4", "showFeedbackIcon": true, "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "scripts": {}, "customMarkingAlgorithm": "", "settings": {"C1": "75", "right": "0.2", "C3": "25", "correctAnswer": "qty(abs(ans[2]),units[0])", "close": "1.0", "C2": "50"}}, {"type": "1_n_2", "showCorrectAnswer": false, "unitTests": [], "variableReplacementStrategy": "originalfirst", "shuffleChoices": false, "marks": 0, "showFeedbackIcon": true, "customMarkingAlgorithm": "", "maxMarks": 0, "matrix": "map(if(sign(ans[2])=s,2,0),s,[1,-1,0])", "choices": ["Tension", "Compression", "Neither"], "displayType": "dropdownlist", "minMarks": 0, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true, "displayColumns": 0}], "sortAnswers": false, "variableReplacements": [], "scripts": {}, "extendBaseMarkingAlgorithm": true}], "extensions": ["geogebra", "quantities", "weh"], "functions": {"load_html": {"type": "html", "definition": "\"<i>\" + loads[k] + \"</i> = \" + qty(f[loads[k]],u)", "parameters": [["k", "number"], ["u", "string"]], "language": "jme"}, "ans": {"type": "string", "definition": "string(siground(qty(abs(f),u),4)) + if(f<0,' (C)', ' (T)')", "parameters": [["f", "number"], ["u", "string"]], "language": "jme"}, "display": {"type": "string", "definition": "string(siground(q,4))", "parameters": [["q", "number"]], "language": "jme"}}}]}], "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}]}