// Numbas version: exam_question_groups
{"name": "Vector addition: tip-to-tail method", "extensions": ["/srv/numbas/media/user-extensions/extracted/41/geogebra", "/srv/numbas/media/user-extensions/extracted/55/quantities", "/srv/numbas/media/user-extensions/extracted/98/weh"], "custom_part_types": [{"published": false, "extensions": ["quantities"], "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\njoin(\nsplit(\njoin(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,'-'),' ')\n,'\u00b0'),' deg')\n\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "public_availability": "restricted", "settings": [{"label": "Correct Quantity.", "evaluate": true, "help_url": "", "input_type": "code", "default_value": "", "hint": "The correct answer given as a JME quantity.", "name": "correctAnswer"}, {"label": "% Accuracy for right.", "evaluate": true, "help_url": "", "input_type": "code", "default_value": "0.2", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "name": "right"}, {"label": "% Accuracy for close.", "evaluate": true, "help_url": "", "input_type": "code", "default_value": "1.0", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "name": "close"}, {"label": "Close with units.", "help_url": "", "input_type": "percent", "default_value": "75", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "name": "C1"}, {"label": "No units or wrong sign", "help_url": "", "input_type": "percent", "default_value": "50", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "name": "C2"}, {"label": "Close, no units.", "help_url": "", "input_type": "percent", "default_value": "25", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "name": "C3"}], "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "allowEmpty": {"value": true, "static": true}, "hint": {"value": "", "static": true}}, "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Does clumsy substitution to</p>\n<p>1.&nbsp;replace '-'&nbsp;with ' '&nbsp;</p>\n<p>2. replace '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "join(\nsplit(\njoin(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,'-'),' ')\n,'\u00b0'),' deg')\n"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "input_widget": "string", "name": "Engineering Accuracy with units", "source": {"author": {"pk": 2530, "name": "William Haynes"}, "pk": 19, "edit_page": "/part_type/19/edit"}, "can_be_gap": true, "short_name": "engineering-answer", "can_be_step": true, "help_url": ""}, {"published": false, "extensions": [], "marking_script": "mark:\ncorrect('You chose the ' \n+ ['positive x',\n   'positive y',\n   'negative x',\n   'negative y'][interpreted_answer] +'-axis.')\n                 \n                 \n                 \n\ninterpreted_answer:\nstudentAnswer", "description": "<p>Choose a reference axis. Returns an integer index between 0&nbsp;and&nbsp;3. &nbsp;0 =+x axis&nbsp;1 = +y axis&nbsp;2 = -x axis&nbsp;3 = -y axis</p>\n<p>To work with angle quantity part type, include a list&nbsp;variable <em><strong>angle_from_ref</strong></em>, and use the axis choice as index. Replace theta with name of angle.</p>\n<p>let(ang,theta,<br /> [if(ang&gt;180,ang-360,ang),<br /> if(ang&gt;270,ang-450,ang-90),<br /> ang-180,<br /> if(ang&gt;90,ang-270,90+ang)]<br />)</p>\n<p>and this (modified as necessary) in the mark student answer (after) script:</p>\n<p>index = Numbas.jme.unwrapValue(this.studentAnswerAsJME());<br />angles = Numbas.jme.unwrapValue(Numbas.exam.currentQuestion.scope.getVariable('<strong>angle_from_ref</strong>'));<br />ans = Qty(angles[index]+' deg');<br />this.parentPart.gaps[<strong>1</strong>].settings.correct_quantity.value=ans;<br />this.markingComment(\"For your axis, the direction is \" + ans.toString() +'.');</p>\n<p></p>", "public_availability": "restricted", "settings": [{"input_type": "string", "help_url": "", "label": "dummy", "default_value": "'ignore'", "hint": "", "subvars": false, "name": "dummy"}], "input_options": {"correctAnswer": "0", "choices": {"value": ["Positive x-axis", "Positive y-axis", "Negative x-axis", "Negative y-axis"], "static": true}, "hint": {"value": "", "static": true}}, "marking_notes": [{"description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "name": "mark", "definition": "correct('You chose the ' \n+ ['positive x',\n   'positive y',\n   'negative x',\n   'negative y'][interpreted_answer] +'-axis.')\n                 \n                 \n                 "}, {"description": "A value representing the student's answer to this part.", "name": "interpreted_answer", "definition": "studentAnswer"}], "input_widget": "dropdown", "name": "Drop-down axis reference", "source": {"author": {"pk": 2530, "name": "William Haynes"}, "pk": 23, "edit_page": "/part_type/23/edit"}, "can_be_gap": true, "short_name": "drop-down-axis-reference", "can_be_step": true, "help_url": ""}, {"published": false, "extensions": ["quantities"], "marking_script": "mark:\nswitch( \nright and good_units and right_sign and angle_in_range, add_credit(1.0,'Correct.'),\nright and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\nright and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but missing degree symbol.'),\nright and good_units and right_sign and not angle_in_range,add_credit(settings['C1'],'Angle is out of range.'),\nclose and good_units, add_credit(settings['C1'],'Close.'),\nclose and not good_units, add_credit(settings['C3'],'Answer is close, but missing degree symbol.'),\nincorrect('Wrong answer.')\n)\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\ncorrect_scalar:\nscalar(correct_quantity)\n  \n\ncorrect_units:\nunits(correct_quantity)\n\ncorrect_quantity:\nsettings['correct_quantity']\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\njoin(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,'\u00b0'),' deg')\n\n\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_quantity),\nmsg,\nfeedback(msg);false)\n\nstudent_quantity:\nswitch(not good_units, \nstudent_scalar * correct_units, \nnot right_sign,\n-quantity(student_scalar, student_units),\nquantity(student_scalar,student_units)\n)\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n\n   \n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\n\nangle_in_range:\nif(settings['restrict_angle'], abs(student_scalar) <= 90, true)", "description": "<p>Angle&nbsp;as a quantity in degrees.</p>", "public_availability": "restricted", "settings": [{"label": "Correct Angle as a quantity", "evaluate": true, "help_url": "", "input_type": "code", "default_value": "qty(123,'deg')", "hint": "", "name": "correct_quantity"}, {"label": "% Accuracy for right.", "evaluate": true, "help_url": "", "input_type": "code", "default_value": "0.2", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "name": "right"}, {"label": "Less than 90\u00b0", "help_url": "", "input_type": "checkbox", "default_value": true, "hint": "When checked, angle must be between -90&deg; and +90&deg;.", "name": "restrict_angle"}, {"label": "Close with units.", "help_url": "", "input_type": "percent", "default_value": "75", "hint": "Partial Credit for close value with appropriate units.", "name": "C1"}, {"label": "% Accuracy for close.", "evaluate": true, "help_url": "", "input_type": "code", "default_value": "1.0", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "name": "close"}, {"label": "No units or wrong sign", "help_url": "", "input_type": "percent", "default_value": "50", "hint": "Partial credit for forgetting units or using wrong sign.", "name": "C2"}, {"label": "Close, no units.", "help_url": "", "input_type": "percent", "default_value": "25", "hint": "Partial Credit for close value without units.", "name": "C3"}], "input_options": {"correctAnswer": "plain_string(settings['correct_quantity'])", "allowEmpty": {"value": false, "static": true}, "hint": {"value": "", "static": true}}, "marking_notes": [{"description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \nright and good_units and right_sign and angle_in_range, add_credit(1.0,'Correct.'),\nright and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\nright and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but missing degree symbol.'),\nright and good_units and right_sign and not angle_in_range,add_credit(settings['C1'],'Angle is out of range.'),\nclose and good_units, add_credit(settings['C1'],'Close.'),\nclose and not good_units, add_credit(settings['C3'],'Answer is close, but missing degree symbol.'),\nincorrect('Wrong answer.')\n)", "name": "mark"}, {"description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)", "name": "interpreted_answer"}, {"description": "", "definition": "scalar(correct_quantity)\n  ", "name": "correct_scalar"}, {"description": "", "definition": "units(correct_quantity)", "name": "correct_units"}, {"description": "", "definition": "settings['correct_quantity']", "name": "correct_quantity"}, {"description": "", "definition": "[\"plain\",\"en\"]", "name": "allowed_notation_styles"}, {"description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)", "name": "match_student_number"}, {"description": "", "definition": "match_student_number[1]", "name": "student_scalar"}, {"description": "", "definition": "join(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,'\u00b0'),' deg')\n\n", "name": "student_units"}, {"description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_quantity),\nmsg,\nfeedback(msg);false)", "name": "good_units"}, {"description": "", "definition": "switch(not good_units, \nstudent_scalar * correct_units, \nnot right_sign,\n-quantity(student_scalar, student_units),\nquantity(student_scalar,student_units)\n)", "name": "student_quantity"}, {"description": "", "definition": "sign(student_scalar) = sign(correct_quantity)", "name": "right_sign"}, {"description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n\n   \n   ", "name": "percent_error"}, {"description": "", "definition": "percent_error <= settings['right']\n", "name": "right"}, {"description": "", "definition": "right_sign and percent_error <= settings['close']\n", "name": "close"}, {"description": "", "definition": "if(settings['restrict_angle'], abs(student_scalar) <= 90, true)", "name": "angle_in_range"}], "input_widget": "string", "name": "Angle quantity", "source": {"author": {"pk": 2530, "name": "William Haynes"}, "pk": 24, "edit_page": "/part_type/24/edit"}, "can_be_gap": true, "short_name": "angle-quantity-from-reference", "can_be_step": true, "help_url": ""}], "resources": [], "navigation": {"showfrontpage": false, "preventleave": false, "allowregen": true}, "question_groups": [{"pickingStrategy": "all-ordered", "questions": [{"statement": "<p><strong></strong>Three forces act on &nbsp;point <em>A</em>: &nbsp; <span style=\"color: green;\"><em>A</em> = {FA} {units[1]} at {alpha}&deg;</span>, <span style=\"color: blue;\"><em>B</em>&nbsp;= {FB} {units[1]} at {beta}&deg;&nbsp;</span> and, <span style=\"color: red;\"><em>C&nbsp;</em>= {FC} {units[1]} at {gamma}&deg;</span>.</p>\n<p>Estimate the magnitude and direction of the resultant force&nbsp;<strong>R</strong>&nbsp;using the&nbsp;tip-to-tail method.</p>\n<p><span data-jme-visible=\"debug\">Force A: {fa} {units[1]}&nbsp;at {alpha} = {forceA}&nbsp;</span></p>\n<p><span data-jme-visible=\"debug\">Force B: {fb} {units[1]}&nbsp;at {beta} = {forceB}</span></p>\n<p><span data-jme-visible=\"debug\">Force C: {fc}{units[1]} at {gamma} = {forceC}</span></p>\n<p><span data-jme-visible=\"debug\">Resultant: {R}{units[1]} &nbsp;at {rho} &nbsp;= {forceR}</span></p>", "ungrouped_variables": [], "contributors": [{"profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/", "name": "William Haynes"}], "extensions": ["geogebra", "quantities", "weh"], "rulesets": {}, "variable_groups": [{"variables": ["alpha", "gamma", "beta", "FA", "FB", "FC", "units", "debug"], "name": "Inputs"}, {"variables": ["ForceA", "ForceB", "ForceC", "ForceR", "rho", "R", "angle_from_ref", "ref"], "name": "Outputs"}], "advice": "<p>Vector Addition: &nbsp;</p>\n<p>$\\Sigma F_x = &nbsp;R_x&nbsp;\\qquad &nbsp;R=\\sqrt{R_x^2 + R_y^2}\\\\\\\\&nbsp;\\Sigma F_y = &nbsp;R_y &nbsp;\\qquad \\theta = \\tan^{-1}\\left(\\left|\\frac{R_y}{R_x}\\right| \\right)$</p>", "variablesTest": {"condition": "abs(alpha-beta) >= 15 and abs(beta-gamma) >= 15  and  abs(gamma-alpha) >= 15 and r <=100 and r > 10", "maxRuns": 100}, "functions": {"direction": {"type": "number", "parameters": [["v", "vector"]], "definition": "return Math.atan2(v[1],v[0])", "language": "javascript"}}, "parts": [{"marks": 0, "customMarkingAlgorithm": "", "unitTests": [], "showFeedbackIcon": true, "showCorrectAnswer": true, "type": "gapfill", "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "gaps": [{"marks": "4", "customMarkingAlgorithm": "", "settings": {"correctAnswer": "qty(R,units[1])", "C1": "75", "close": "4", "right": "2", "C2": "50", "C3": "25"}, "extendBaseMarkingAlgorithm": true, "variableReplacementStrategy": "originalfirst", "type": "engineering-answer", "unitTests": [], "showFeedbackIcon": true, "showCorrectAnswer": true, "scripts": {}, "variableReplacements": []}, {"marks": "0", "customMarkingAlgorithm": "", "settings": {"dummy": "'ignore'"}, "extendBaseMarkingAlgorithm": true, "variableReplacementStrategy": "originalfirst", "type": "drop-down-axis-reference", "unitTests": [], "showFeedbackIcon": true, "showCorrectAnswer": true, "scripts": {"mark": {"order": "after", "script": "index = Numbas.jme.unwrapValue(this.studentAnswerAsJME());\nangles = Numbas.jme.unwrapValue(Numbas.exam.currentQuestion.scope.getVariable('angle_from_ref'));\nans = angles[index]+' deg';\nthis.parentPart.gaps[2].settings.correct_quantity.value=Qty(ans);\nthis.markingComment(\"For your axis, the direction is \" + ans +'.');"}}, "variableReplacements": []}, {"marks": "4", "customMarkingAlgorithm": "", "settings": {"right": "2", "correct_quantity": "qty(angle_from_ref[ref],'deg')", "C1": "75", "close": "4", "restrict_angle": false, "C2": "50", "C3": "25"}, "extendBaseMarkingAlgorithm": true, "variableReplacementStrategy": "alwaysreplace", "type": "angle-quantity-from-reference", "unitTests": [], "showFeedbackIcon": true, "showCorrectAnswer": true, "scripts": {}, "variableReplacements": [{"part": "p0g1", "variable": "ref", "must_go_first": false}]}], "prompt": "<ol>\n<li>Move the tips of forces <strong class=\"green\">A</strong>, <strong class=\"blue\">B</strong>, and <strong class=\"red\">C</strong> in this diagram to the&nbsp;correct magnitudes and directions. When this has been done correctly the dotted vector will become solid.</li>\n<li>Pick up&nbsp;vectors <strong class=\"green\">A</strong>, <strong class=\"blue\">B</strong> and <strong class=\"red\">C</strong>&nbsp; by their tails, and move them into a tip to tail arrangement.&nbsp;When this has been correctly done the resultant <strong>R</strong> will appear.</li>\n</ol>\n<p>{geogebra_applet('jwussezq ', [['f_a', forceA],['f_b', forceB],['f_c', forceC]])}</p>\n<p>Based on this diagram, estimate the magnitude <strong>R</strong> &nbsp;and direction of the resultant.</p>\n<p><strong>R</strong> =&nbsp;[[0]]&nbsp;@&nbsp;[[2]]&nbsp;measured from the&nbsp;[[1]].</p>\n<p></p>", "scripts": {}, "sortAnswers": false}], "preamble": {"js": "", "css": ".red{color:red;}\n.blue{color:blue;}\n.green{color:green;}"}, "variables": {"ForceR": {"definition": "ForceA+ForceB+ForceC", "group": "Outputs", "name": "ForceR", "description": "<p>Resultant as a vector</p>", "templateType": "anything"}, "alpha": {"definition": "(random(-180..180#15))\n", "group": "Inputs", "name": "alpha", "description": "<p>direction of force A</p>", "templateType": "anything"}, "ForceA": {"definition": "FA *( vector(cos(radians(alpha)),sin(radians(alpha))))", "group": "Outputs", "name": "ForceA", "description": "<p>force A&nbsp;as a vector</p>", "templateType": "anything"}, "ForceB": {"definition": "FB *( vector(cos(radians(beta)),sin(radians(beta))))", "group": "Outputs", "name": "ForceB", "description": "<p>Force B as a vector</p>", "templateType": "anything"}, "FA": {"definition": "random(20..80#5)", "group": "Inputs", "name": "FA", "description": "<p>Magnitude of force A</p>", "templateType": "anything"}, "ref": {"definition": "0", "group": "Outputs", "name": "ref", "description": "", "templateType": "anything"}, "ForceC": {"definition": "FC *( vector(cos(radians(gamma)),sin(radians(gamma))))", "group": "Outputs", "name": "ForceC", "description": "<p>Force C as a vector</p>", "templateType": "anything"}, "R": {"definition": "abs(ForceR)", "group": "Outputs", "name": "R", "description": "<p>Magnitude of resultant</p>", "templateType": "anything"}, "FB": {"definition": "random(20..80#5)", "group": "Inputs", "name": "FB", "description": "<p>Magnitude of Force B</p>", "templateType": "anything"}, "gamma": {"definition": "(random(-180..180#15))", "group": "Inputs", "name": "gamma", "description": "<p>Direction of force C in degrees</p>", "templateType": "anything"}, "beta": {"definition": "(random(-180..180#15))", "group": "Inputs", "name": "beta", "description": "<p>Direction of force B</p>", "templateType": "anything"}, "rho": {"definition": "degrees(direction(ForceR))", "group": "Outputs", "name": "rho", "description": "<p>direction of resultant</p>", "templateType": "anything"}, "units": {"definition": "random(['ft','lb'],['in','lb'],['cm','N'])", "group": "Inputs", "name": "units", "description": "", "templateType": "anything"}, "angle_from_ref": {"definition": "[if(rho>180,rho-360,rho),\nif(rho>270,rho-450,rho-90),\nrho-180,\nif(rho>90,rho-270,90+rho)]\n\n", "group": "Outputs", "name": "angle_from_ref", "description": "", "templateType": "anything"}, "debug": {"definition": "false", "group": "Inputs", "name": "debug", "description": "", "templateType": "anything"}, "FC": {"definition": "random(20..80#5)", "group": "Inputs", "name": "FC", "description": "<p>Magnitude of force C</p>", "templateType": "anything"}}, "tags": ["mechanics, statics, vector addition, graphical methods"], "name": "Vector addition: tip-to-tail method", "metadata": {"description": "<p>Given three vectors, arrange them in a tip to tail arrangement using geogebra, then estimate the magnitude and direction of their resultant.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}}]}], "contributors": [{"profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/", "name": "William Haynes"}]}